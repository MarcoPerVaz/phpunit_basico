<----------Proyecto PHPUnit---------->
Commit - Creación del proyecto
  -Creación de la carpeta Instrucciones
    -Creación del archivo GuíaCommits.txt
  -Creación de la carpeta tests
  -Creación y edición del archivo readme.md
Commit - Flujo de trabajo sin PHPUnit
  Nota: En esta clase se muestra como funciona EDD (Desarrollo Guíado por Errores), el término no existe pero es para la
        idea en general, se hacen ejercicios para comprobar como se veían y se solucionaban errores y mejoras de código.
  -Creación de la carpeta 1
    -Creación y edición del archivo index.php
      -Creación de la clase Slug.php para usarse con el ejercicio 4 en index.php
Commit - Mi primera prueba con PHPUnit
  -Creación de la carpeta 2
  -Desde consola ir a la ruta
    -cd c:/laragon/www/phpunit/tests/2
  -Instalación de la herramienta PHPUnit
    -composer require --dev phpunit/phpunit ^8
      -Dónde ^8 es la versión de phpunit
      -Se crea la carpeta vendor con sus carpetas internas el archivo composer.json y composer.lock
  -Creación y edición del archivo SlugTest.php dentro de la carpeta 2
    -Será el archivo para las pruebas
  -Desde consola se usa el comando para pruebas
    -vendor/bin/phpunit SlugTest.php
    Nota: vendor/bin/phpunit SlugTest.php --color
      -Dónde --color destaca lo importante en la consola
  -Creación y edición del archivo Slug.php
  -Creación de la carpeta app
  -Creación de la carpeta tests
  -Desde consola se mueven los archivos Slug.php a la carpeta app y SlugTest.php a la carpeta tests
    -mv Slug.php app/
    -mv SlugTest.php tests/
  -Desde consola realizar la prueba del test
    -vendor/bin/phpunit tests/SlugTest.php --color
Commit - Estructura de carpetas(Laravel)
  -Creación del proyecto de Laravel 5.8 llamado 3
    -composer create-project --prefer-dist laravel/laravel 3 "5.8.*"
    Nota: El proyecto se crea dentro de la carpeta tests
Commit - Estructura de pruebas como en Laravel
  -Creación de la carpeta 4 dentro de tests
  -Comando para instalar PHPUnit
    -composer require --dev phpunit/phpunit ^8
      -Dónde ^8 es la versión de phpunit
      -Se crea la carpeta vendor con sus carpetas internas el archivo composer.json y composer.lock
  -Creación de la carpeta app/ y tests/ dentro de la carpeta 4
  -Creación y edición del archivo php.xml dentro de la carpeta 4
  -Edición del archivo composer.json
  -Comando para registrar los cambios hechos en  composer.json
    -composer dump-autoload
  -Creación y edición del archivo SlugTest.php dentro de la carpeta tests
  -Creación y edición de la clase Slug.php dentro de la carpeta app
  -Comando para ejecutar las pruebas
    -vendor/bin/phpunit
Commit - Aserciones o afirmaciones en PHPUnit
  -Creación de la carpeta 5 dentro de la carpeta tests
      -Comando para crear la carpeta
        -mkdir 5
          Nota: Desde la terminal debe estar dentro de la carpeta donde se quiera crear la nueva carpeta
    -Instalación de phpunit
      -Comando para instalar PHPUnit
      -composer require --dev phpunit/phpunit ^8
        -Dónde ^8 es la versión de phpunit
        -Se crea la carpeta vendor con sus carpetas internas el archivo composer.json y composer.lock
    -Creación de la carpeta tests
      -Creación y edición del archivo ExampleTest.php
    -Creación y edición del archivo phpunit.xml (no se usa pero se crea para saber que es buena práctica hacerlo)
Commit - TDD - Rojo, Verde y Refactor
  -Creación de la carpeta 6 dentro de la carpeta tests
    -Comando para crear la carpeta desde consola
      -cd tests
      -mkdir 6
      Nota: Verificar que se esté dentro de la ruta donde se creará la carpeta
    -Instalación de phpunit
      -Comando para instalar PHPUnit
      -composer require --dev phpunit/phpunit ^8
        -Dónde ^8 es la versión de phpunit
        -Se crea la carpeta vendor con sus carpetas internas el archivo composer.json y composer.lock
    -Creación de la carpeta app/
    -Creación de la carpeta tests/
      -Creación y edición del test UserTest.php
    -Creación y edición del archivo phpunit.xml
    -Edición del archivo composer.json
    -Comando para actualizar dependencias de php
      -composer dump-autoload
  Nota: Rojo significa que la prueba no pasa y que se debe arreglar
        Verde significa que la prueba pasa y que el código está correcto
        Refactor significa que el código se va a mejorar
Commit - Test de setName() y getName()
  -Dentro de la carpeta 6
    -Edición de UserTest.php
    -Comando para correr la prueba
      -vendor/bin/phpunit
      Nota: La prueba falla porque no existe la clase App\User
    -Creación del archivo User.php dentro de la carpeta app
    -Comando para correr la prueba
      -vendor/bin/phpunit
      Nota: La prueba falla porque no existe el método setName dentro de la clase App\User
      Nota: La prueba falla porque no existe el método getName dentro de la clase App\User
    -Edición del archivo User.php dentro de la carpeta app
      -Creación y edición de la función setName()
      -Creación y edición de la función getName()
Commit - Test de setLastName() y getLastName()
  -Dentro de la carpeta 6
    -Edición del archivo UserTest.php
      -Creación y edición del test test_i_can_the_lastname()
    -Comando para correr la prueba
      -vendor/bin/phpunit
      Nota: La prueba falla porque no existe el método setLastName() dentro de la clase App\User
    -Creación y edición de la función setLastName
    -Creación y edición de la función getLastName
    